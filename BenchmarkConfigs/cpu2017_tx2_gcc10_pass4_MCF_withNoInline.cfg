#------------------------------------------------------------------------------
# SPEC CPU2017 config file for: gcc / g++ / gfortran on Linux ARM systems
#------------------------------------------------------------------------------
#
# Usage: (1) Copy this to a new name
#             cd $SPEC/config
#             cp Example-x.cfg myname.cfg
#        (2) Change items that are marked 'EDIT' (search for it)
#
# SPEC tested this config file with:
#      Compiler name/version:       [gcc, g++, gfortran version 8]
#      Operating system version:    [https://build.opensuse.org/project/show/devel:ARM:Factory:Contrib:ILP32]
#      Hardware:                    [ThunderX2]
#
# If your system differs, this config file might not work.
# You might find a better config file at http://www.spec.org/cpu2017/results
#
#######################################################################
# T99 config file for ilp32
# Apply following values:
#	128 - number of threads per socket
#	256 - number of threads in the system
#	32 - number of cores in socket
#	64 - number of cores in the system
#	64 - number of threads per socket up to max of 2 per core
#	128 - number of threads up to max of 2 per core
# This config file defaults to ilp32 build, requiring a compiler with ilp32 support and a kernel with ilp32 support
# Please define the root folder for gcc with ilp32 support as below
# --define gcc_dir=<folder for gcc with ilp32 support>, if default compiler on the system does not support it.
# This config file was tested with openSUSE. After installing openSUSE
# sudo zypper ar -f http://download.opensuse.org/repositories/devel:/ARM:/Factory:/Contrib:/ILP32/standard devel:ARM:Factory:Contrib:ILP32.repo
# sudo zypper in kernel-64kb gcc8-32bit gcc8-c++-32bit gcc8-fortran-32bit libjemalloc2
# build jemalloc 4.5.0 for 32bit
#  git clone https://github.com/jemalloc/jemalloc.git
#  cd jemalloc
#  git checkout 4.5.0
#  ./autogen.sh
#  export FLAGS="-mabi=ilp32"
#  ./configure --enable-autogen CC="gcc-8 $FLAGS" CXX="g++-8 $FLAGS" --libdir=/usr/libilp32
#  make -j
#  sudo make install_bin install_include install_lib
#
# build arm math libraries
#  git clone https://github.com/ARM-software/optimized-routines.git
#  cd optimized-routines
#  cp config.mk.dist config.mk
#  sed -i -e 's#gcc#gcc-8#g' config.mk
#  make
#  make DESTDIR=/opt/lp64 install
#
# add kpti=off in the kernel command line and update grub
# (ThunderX2 is not volnerable to meltdown, hence this mitigation is not required).
# reboot to the 64k kernel before running the test.
# set /sys/kernel/mm/transparent_hugepage/enabled to always
# ulimit -s unlimited
# runcpu -c tx2j_<cores>c.cfg --define gcc_postfix=-8 --define gcc_dir=/usr --define bits=32 intrate
# runcpu -c tx2j_<cores>c.cfg --define gcc_postfix=-8 --define gcc_dir=/usr --define bits=64 fprate
#
# Please note, for best performance, boot with smt=4 for specint, and with smt=2 for specfp suite.
# Please note, with 32c 4T/c, if using bits=64 for intrate, 256G of ram required per socket.
##################################################################################################


#--------- Label --------------------------------------------------------------
%define label tx2-jemalloc

#--------- Preprocessor -------------------------------------------------------
%ifndef %{bits}                # EDIT to control 32 or 64 bit compilation.  Or,
%   define  bits        32     #      you can set it on the command line using:
%endif                         #      'runcpu --define bits=nn'

%ifndef %{build_ncpus}         # EDIT to adjust number of simultaneous compiles.
%   define  build_ncpus 64     #      Or, you can set it on the command line:
%endif                         #      'runcpu --define build_ncpus=nn'

# Don't change this part.
%define    os           LINUX

#setup submit depending on single/dual socket
%ifndef %{sockets}
%   define sockets 2
%endif
%ifndef %{single_core}
%   define single_core 0
%endif

%ifndef %{smt}
%   define smt 4
%endif

%if %{single_core} == 1
% define   Use1PerCore 1
% define   Use2PerCore 2
% if %{smt} == 1
%  define   UseMaxPerCore 1
%  define   Use2PerCore 1
% elif %{smt} == 2
%  define   UseMaxPerCore 2
% elif %{smt} == 4
%  define   UseMaxPerCore 4
% endif
  submit = THREADS=`cat /sys/devices/system/cpu/cpu1/topology/thread_siblings_list` ; numactl --localalloc -C \$THREADS $command
%else
% if %{sockets} == 1
%  define   Use34PerCore 24
%  define   Use1PerCore  32
%  define   Use2PerCore  64
%  if %{smt} == 1
%   define   Use2PerCore   32
%   define   UseMaxPerCore  32
%  elif %{smt} == 2
%   define   UseMaxPerCore 64
%  elif %{smt} == 4
%   define   UseMaxPerCore 128
%  endif
   submit = numactl --localalloc -C $SPECCOPYNUM $command
% else
%  define   Use34PerCore 48
%  define   Use1PerCore  64
%  define   Use2PerCore  128
%  if %{smt} == 1
%   define   Use2PerCore   64
%   define   UseMaxPerCore   64
    submit = n=$SPECCOPYNUM ; CORE=\$[\$n/2+\$n%2*32] ; numactl --localalloc -C \$CORE $command
%  elif %{smt} == 2
%   define   UseMaxPerCore   128
    submit = n=$SPECCOPYNUM ; CORE=\$[\$n/2+\$n%2*64] ; numactl --localalloc -C \$CORE $command
%  elif %{smt} == 4
%   define   UseMaxPerCore   256
    submit = n=$SPECCOPYNUM ; CORE=\$[\$n/2+\$n%2*128] ; numactl --localalloc -C \$CORE $command
%  endif
% endif
%endif

#--------- Global Settings ----------------------------------------------------
# For info, see:
#            https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example: https://www.spec.org/cpu2017/Docs/config.html#tune

command_add_redirect = 1
flagsurl000          = /opt/cpu2017/config/flags/gcc.xml
flagsurl001          = /mnt/nas/benchmarks/specint2017/gcc-arm.xml
iterations           = 3
label                = %{label}-p%{bits}
line_width           = 1020
log_line_width       = 1020
makeflags            = --jobs=%{build_ncpus}
mean_anyway          = 1
output_format        = txt,html,cfg,csv,pdf
preenv               = 1
reportable           = 1
tune                 = peak

preENV_MALLOC_CONF       = retain:true,metadata_thp:always,thp:always,dirty_decay_ms:-1

#--------- Monitoring  -----------------------------------------------------
# Run perf or other monitors in the background,
# make sure monitoring process is dead at end of the run,
# save to file based on benchmark name

%ifndef %{monitor_socmon}
% define monitor_socmon 0
%endif
%if %{monitor_socmon} == 1
  monitor_pre_bench = socmon -D > /dev/null 2>&1 &
  monitor_post_bench = sudo killall socmon_tool ; sleep 1 ; sudo mv freq_dump.csv /opt/cpu2017/result/socmon_${lognum}_${benchmark}_${tune}_it${iter}_wrkld${workload}.csv
%endif

%ifndef %{monitor_perf}
% define monitor_perf 0
%endif
%if %{monitor_perf} == 1
% ifndef %{monitor_events}
%  define monitor_events stalled-cycles-backend,dTLB-load-misses,instructions,cycles
% endif
% ifndef %{monitor_threads}
%  define monitor_threads 1
% endif
monitor_pre_bench = bash -c "sudo perf stat -a -I 1000 -x , -e %{monitor_events} -o ${top}/result/perf_${baseexe}_${workload}_log_${lognum}_${tune}_iter_${iter}.csv sleep 100000 &" && echo "running perf to ${top}/result/perf_${baseexe}_${workload}_log_${lognum}_${tune}_iter_${iter}.csv"
monitor_post_bench = sudo killall sleep ; sleep 1 ; sudo killall perf ; echo "perf done"
%endif

#--------- How Many CPUs? -----------------------------------------------------
intrate:
	copies	= %{UseMaxPerCore}

fprate:
	copies	= %{Use2PerCore}

intspeed:
	threads	= %{UseMaxPerCore}

fpspeed:
	threads	= %{Use2PerCore}

#------- Compilers ------------------------------------------------------------
default:
%ifndef %{gcc_dir}
%   define  gcc_dir  /usr
%endif

%ifndef %{gcc_postfix}
%   define  gcc_postfix
%endif

%if '%{gcc_dir}' eq '/usr'
%   define rpath
%   define dlinker
%	define libpath
%	define sysroot
%else
% define sysroot --sysroot=%{gcc_dir}
% define rpath64 -Wl,--rpath=%{gcc_dir}/lib64
% define model64 -mabi=lp64
% define linker64 -Wl,--dynamic-linker=%{gcc_dir}/lib/ld-linux-aarch64.so.1
% define libpath64 -L%{gcc_dir}/usr/lib64 -L%{gcc_dir}/lib64 -L/opt/lp64/usr/lib -L%{gcc_dir}
% if %{bits} == 64
%   define rpath %{rpath64}
%   define dlinker %{linker64}
%   define libpath %{libpath64}
% elif %{bits} == 32
%   define rpath -Wl,--rpath=%{gcc_dir}/libilp32
%   define dlinker -Wl,--dynamic-linker=%{gcc_dir}/lib/ld-linux-aarch64_ilp32.so.1
%   define libpath -L%{gcc_dir}/usr/libilp32 -L%{gcc_dir}/libilp32 -L/opt/ilp32/usr/lib -L%{gcc_dir}
% endif
%endif

%if %{bits} == 64
%   define model        -mabi=lp64
%elif %{bits} == 32
%   define model        -mabi=ilp32
%endif


%if %{bits} == 64
   preENV_LD_LIBRARY_PATH = /opt/lp64/usr/lib
   #preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64:/opt/lp64/usr/lib
   preENV_LIBRARY_PATH  = %{gcc_dir}/usr/lib64:/opt/lp64/usr/lib
%else
   preENV_LD_LIBRARY_PATH  = %{gcc_dir}/libilp32:/opt/ilp32/usr/lib
   preENV_LIBRARY_PATH  = %{gcc_dir}/usr/libilp32:/opt/ilp32/usr/lib
%endif

# In addition to setting the path, set the default language standard used
# for C and CXX
SPECLANG        = %{gcc_dir}/bin/
CC              = $(SPECLANG)gcc%{gcc_postfix}   -std=c11
CXX             = $(SPECLANG)g++%{gcc_postfix}   -std=c++03
FC              = $(SPECLANG)gfortran%{gcc_postfix}
# How to say "Show me your version, please"
CC_VERSION_OPTION       = --version
CXX_VERSION_OPTION      = --version
FC_VERSION_OPTION       = --version

default:
%if %{bits} == 64
   sw_base_ptrsize = 64-bit
   sw_peak_ptrsize = 64-bit
%else
   sw_base_ptrsize = 32-bit
   sw_peak_ptrsize = 32-bit
%endif


#--------- Portability --------------------------------------------------------
default:   # data model applies to all benchmarks
%if %{bits} == 32
    EXTRA_PORTABILITY = -D_FILE_OFFSET_BITS=64
%else
    EXTRA_PORTABILITY = -DSPEC_LP64
%endif

# Benchmark-specific portability (ordered by last 2 digits of bmark number)

500.perlbench_r,600.perlbench_s:  #lang='C'
%if %{bits} == 32
%   define suffix AARCH32
%else
%   define suffix AARCH64
%endif
   PORTABILITY    = -DSPEC_%{os}_%{suffix}

521.wrf_r,621.wrf_s:  #lang='F,C'
   CPORTABILITY  = -DSPEC_CASE_FLAG
   FPORTABILITY  = -fconvert=big-endian -std=legacy

523.xalancbmk_r,623.xalancbmk_s=base:  #lang='CXX'
   PORTABILITY   = -DSPEC_%{os}

526.blender_r:  #lang='CXX,C'
   CPORTABILITY  = -std=gnu11
   PORTABILITY   = -funsigned-char -DSPEC_LINUX

527.cam4_r,627.cam4_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG -std=legacy

628.pop2_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG -fconvert=big-endian

#-------- Tuning Flags common to Base and Peak --------------------------------

#
# Speed (OpenMP and Autopar allowed)
#
intspeed,fpspeed:
   EXTRA_OPTIMIZE = -fopenmp -DSPEC_OPENMP
%if %{sockets} == 1
   preENV_OMP_PROC_BIND=close
%else
   preENV_OMP_PROC_BIND=spread
%endif
%if %{omp_static} == 1
   preENV_OMP_SCHEDULE=static
%endif


fpspeed:
   preENV_OMP_STACKSIZE = 120M

#--------  Baseline Tuning Flags ----------------------------------------------
#

#-fprefetch-loop-arrays --param prefetch-dynamic-strides=1

%define opt_common -Ofast -mcpu=native -flto=32 -fomit-frame-pointer --param ipa-cp-eval-threshold=1 --param ipa-cp-unit-growth=80
%define opt_model %{model} %{rpath} %{dlinker} %{libpath} %{sysroot}
%define opt_lp64 -mabi=lp64 %{rpath64} %{linker64} %{libpath64} %{sysroot}

intrate,intspeed=base:         # flags for int base
   OPTIMIZE         =   %{opt_common} %{opt_model}
   EXTRA_CXXLIBS = -ljemalloc
   EXTRA_FOPTIMIZE = -fno-inline-functions-called-once
#-fno-inline-functions-called-once
   LDCFLAGS = -fenable-ipa-struct_split

fprate,fpspeed=base:         # flags for fp base
   OPTIMIZE         = -Ofast -mcpu=native -fomit-frame-pointer

intrate,intspeed=base: # flags for integer base
   EXTRA_COPTIMIZE = -fgnu89-inline -fno-strict-aliasing -fno-unsafe-math-optimizations -fno-finite-math-only -fcommon

#--------  Peak Tuning Flags ----------------------------------------------
intrate,intspeed=peak:
   PASS1_OPTIMIZE   = %{opt_common} %{opt_model} -fprofile-generate
   PASS2_OPTIMIZE   = %{opt_common} %{opt_model} -fprofile-use -fprofile-partial-training
   EXTRA_FOPTIMIZE = -fno-inline-functions-called-once

fprate,fpspeed=peak:
   OPTIMIZE         = -Ofast -mcpu=native -fomit-frame-pointer

intrate,intspeed=peak: # flags for integer peak
   EXTRA_COPTIMIZE = -fgnu89-inline

500.perlbench_r,600.perlbench_s=peak:  #lang='C'
   EXTRA_COPTIMIZE= -fno-strict-aliasing -fno-unsafe-math-optimizations -fno-finite-math-only --param prefetch-dynamic-strides=1

505.mcf_r=peak:
   copies=%{Use1PerCore}
   EXTRA_COPTIMIZE=-fno-strict-aliasing
   LDCFLAGS = -fenable-ipa-struct_split

# The split-loops and finite-loops optimizations are desired.
# split-loops is enabled at -O3 and changes behavior based on profile info,
# if available. The --params min-loop-cond-split-prob option can be used to
# tweak the algorithm.
# finite-loops will clean up empty loops generated by split-loops, and is
# enabled by default at >= O2 only if std >= cxx11.
# Order of CXX compilation flags:
# CC ... CXXOPTIMIZE ... EXTRA_CXXOPTIMIZE ... EXTRA_CXXPORTABILITY
# There is no explicit guarentee that later settings of a command line
# argument override earlier ones, so don't use "-std=c++11", but the
# explicit option flags.
520.omnetpp_r=peak:                    #lang='CXX'
   EXTRA_CXXOPTIMIZE = -fsplit-loops -ffinite-loops

523.xalancbmk_r,623.xalancbmk_s=peak:  #lang='CXX'
   PORTABILITY    = -DSPEC_%{os}
   EXTRA_CXXLIBS = -ljemalloc
   EXTRA_OPTIMIZE = -freg-struct-return

541.leela_r=peak:
   EXTRA_OPTIMIZE = -fshort-enums

554.roms_r,654.roms_s=peak:
   EXTRA_FOPTIMIZE= -frepack-arrays -mno-pc-relative-literal-loads

508.namd_r=peak:
   OPTIMIZE         = -O3 -mcpu=native -fomit-frame-pointer

525.x264_r=peak:
   feedback   = no
   OPTIMIZE         =  %{opt_common} %{opt_model}
   EXTRA_LIBS = -ljemalloc
   EXTRA_COPTIMIZE=-fcommon -fshort-enums

502.gcc_r=peak:
   copies=%{Use2PerCore}
   EXTRA_COPTIMIZE  = -fno-strict-aliasing -fgnu89-inline

548.exchange2_r=peak:
	feedback    = no
	OPTIMIZE    = %{opt_common} %{opt_lp64}
   	EXTRA_FOPTIMIZE= -mno-pc-relative-literal-loads

# slight improvement for the benchmark below if the SW prefetch is used
503.bwaves_r,511.povray_r,526.blender_r,538.imagick_r,554.roms_r=peak:
   EXTRA_OPTIMIZE = -fprefetch-loop-arrays

510.parest_r,554.roms_r=peak:
   copies=%{Use1PerCore}

503.bwaves_r=peak:
   copies=%{Use34PerCore}

# Notes about the above
#  - 500.perlbench_r/600.perlbench_s needs -fno-strict-aliasing , -fno-unsafe-math-optimizations and -fno-finite-math-only
#  - 502.gcc_r/602.gcc_s             needs -fgnu89-inline
#  - mcf needs -fno-strict-aliasing
#  - parest requires -std=c++03 or -fpermissive
#  - blender requires -std=gnuXX with current versions of glibc and with cpu2017 up to v1.0.5
#  - For 'base', all benchmarks in a set must use the same options.
#  - Therefore, all base benchmarks get the above.  See:
#       www.spec.org/cpu2017/Docs/runrules.html#BaseFlags
#       www.spec.org/cpu2017/Docs/benchmarks/500.perlbench_r.html
#       www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html

#------------------------------------------------------------------------------
# Tester and System Descriptions - EDIT all sections below this point
#------------------------------------------------------------------------------
#   For info about any field, see
#             https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example:  https://www.spec.org/cpu2017/Docs/config.html#hw_memory
#-------------------------------------------------------------------------------

#--------- EDIT to match your version -----------------------------------------
default:
        sw_compiler000   = C/C++/Fortran: gcc (GCC) 10.0.1 20200409
        sw_compiler001 = (experimental)
        sw_compiler002   = GNU Compiler Collection
        notes_submit_000 = The numactl mechanism was used to bind copies to processors. The config file option 'submit'
        notes_submit_005 = was used to generate numactl commands to bind each copy to a specific processor.
        notes_submit_010 = For details, please see the config file.
        notes_os_000 = Stack size set to unlimited using "ulimit -s unlimited"
        notes_os_005 = Prior to runcpu invocation
        notes_os_010 = Filesystem page cache synced and cleared with:
        notes_os_015 =  sync; echo 3>       /proc/sys/vm/drop_caches
        notes_os_020 = Transparent Huge Pages enabled with:
        notes_os_025 = echo always > /sys/kernel/mm/transparent_hugepage/enabled

#--------- EDIT info about you ------------------------------------------------
# To understand the difference between hw_vendor/sponsor/tester, see:
#     https://www.spec.org/cpu2017/Docs/config.html#test_sponsor
intrate,intspeed,fprate,fpspeed: # Important: keep this line
   hw_vendor          = Marvell Semiconductor Inc.
   tester             = Marvell Semiconductor Inc.
   test_sponsor       = Marvell Semiconductor Inc.
   license_num        = 2936

#--------- EDIT system availability dates -------------------------------------
intrate,intspeed,fprate,fpspeed: # Important: keep this line
   hw_avail           = Jun-2020
   sw_avail           = Jun-2020

#--------- EDIT system information --------------------------------------------
intrate,intspeed,fprate,fpspeed: # Important: keep this line
   hw_cpu_name        = CN9980-2200LG4077-Y22-G
   hw_cpu_nominal_mhz = 2200
   hw_cpu_max_mhz     = 2500
   hw_model           = Cavium ThunderX2(R) CPU CN9980 v2.2 @ 2.20GHz
%if %{sockets} == 1
   hw_nchips          = 1
   hw_ncpuorder		  = 1 chip(s)
   hw_ncores          = 32
%else
   hw_nchips          = 2
   hw_ncpuorder		  = 1, 2 chip(s)
   hw_ncores          = 64
%endif

%if %{smt} == 4
   hw_nthreadspercore = 4
%elif %{smt} == 2
   hw_nthreadspercore = 2
%else
   hw_nthreadspercore = 1
%endif
   hw_other           = None

   hw_memory000       = 512 GB (16 x 32 GB 2Rx4 PC4-2666V-R)

   hw_pcache          = 32 KB I + 32 KB D on chip per core
   hw_scache          = 256 KB I+D on chip per core
   hw_tcache          = 32 MB I+D on chip per chip
   hw_ocache          = None

   fw_bios            = TX2-FW-Release-7.4.1-build_03
   sw_other           = libjemalloc v4.5.0

   notes_peak_jemalloc_000      = jemalloc: jemalloc memory allocator library v4.5.0;
   notes_peak_jemalloc_005      = jemalloc: configured and built at default for 32bit (ilp32) and 64bit (lp64) targets;
   notes_peak_jemalloc_010      = jemalloc: built with gcc (GCC) 10.0.1 20200409 (experimental);
   notes_peak_jemalloc_015      = jemalloc: sources avilable from jemalloc.net or https://github.com/jemalloc/jemalloc/releases;

